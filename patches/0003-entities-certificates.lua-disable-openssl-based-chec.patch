From 7dbc481b51fe465303866e1bfef1425b5ee4ba35 Mon Sep 17 00:00:00 2001
From: Harry Bagdi <harrybagdi@gmail.com>
Date: Tue, 30 Nov 2021 13:59:56 -0800
Subject: [PATCH 03/10] entities/certificates.lua: disable openssl based check

Since only plugin validation checks are required, disabling this check
should result in no breakage.
This change is required because the code loads the schema of
certificates since service schema needs to be loaded (service schema is
referenced from plugin schema).
---
 .../kong/db/schema/entities/certificates.lua  | 48 -------------------
 1 file changed, 48 deletions(-)

diff --git a/lua-tree/share/lua/5.1/kong/db/schema/entities/certificates.lua b/lua-tree/share/lua/5.1/kong/db/schema/entities/certificates.lua
index 31c4348..004a973 100644
--- a/lua-tree/share/lua/5.1/kong/db/schema/entities/certificates.lua
+++ b/lua-tree/share/lua/5.1/kong/db/schema/entities/certificates.lua
@@ -1,6 +1,4 @@
 local typedefs = require "kong.db.schema.typedefs"
-local openssl_pkey = require "resty.openssl.pkey"
-local openssl_x509 = require "resty.openssl.x509"
 
 
 local type = type
@@ -24,51 +22,5 @@ return {
 
   entity_checks = {
     { mutually_required = { "cert_alt", "key_alt" } },
-    { custom_entity_check = {
-      field_sources = { "cert", "key" },
-      fn = function(entity)
-        local cert = openssl_x509.new(entity.cert)
-        local key = openssl_pkey.new(entity.key)
-
-        if cert:get_pubkey():to_PEM() ~= key:to_PEM("public") then
-          return nil, "certificate does not match key"
-        end
-
-        return true
-      end,
-    } },
-    { custom_entity_check = {
-      field_sources = { "cert_alt", "key_alt" },
-      fn = function(entity)
-        if type(entity.cert_alt) == "string" and type(entity.key_alt) == "string" then
-          local cert_alt = openssl_x509.new(entity.cert_alt)
-          local key_alt = openssl_pkey.new(entity.key_alt)
-
-          if cert_alt:get_pubkey():to_PEM() ~= key_alt:to_PEM("public") then
-            return nil, "alternative certificate does not match key"
-          end
-        end
-
-        return true
-      end,
-    } },
-    { custom_entity_check = {
-      field_sources = { "cert", "cert_alt" },
-      fn = function(entity)
-        if type(entity.cert) == "string" and type(entity.cert_alt) == "string" then
-          local cert = openssl_x509.new(entity.cert)
-          local cert_alt = openssl_x509.new(entity.cert_alt)
-          local cert_type = cert:get_pubkey():get_key_type()
-          local cert_alt_type = cert_alt:get_pubkey():get_key_type()
-          if cert_type.id == cert_alt_type.id then
-            return nil, "certificate and alternative certificate need to have " ..
-                        "different type (e.g. RSA and ECDSA), the provided " ..
-                        "certificates were both of the same type"
-          end
-        end
-
-        return true
-      end,
-    } },
   }
 }
-- 
2.25.1


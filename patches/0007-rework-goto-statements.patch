From 7b690c8a0f2c035410cfecb7eb3a09991bf33e72 Mon Sep 17 00:00:00 2001
From: Harry Bagdi <harrybagdi@gmail.com>
Date: Tue, 30 Nov 2021 17:13:50 -0800
Subject: [PATCH 07/10] rework goto statements

---
 .../share/lua/5.1/kong/db/schema/entity.lua   | 24 +++---
 .../share/lua/5.1/kong/db/schema/init.lua     | 76 ++++++++++---------
 2 files changed, 51 insertions(+), 49 deletions(-)

diff --git a/lua-tree/share/lua/5.1/kong/db/schema/entity.lua b/lua-tree/share/lua/5.1/kong/db/schema/entity.lua
index 0547aef..bf62e46 100644
--- a/lua-tree/share/lua/5.1/kong/db/schema/entity.lua
+++ b/lua-tree/share/lua/5.1/kong/db/schema/entity.lua
@@ -43,23 +43,21 @@ function Entity.new(definition)
       return nil, entity_errors.NO_NILABLE:format(name)
     end
 
-    if field.abstract then
-      goto continue
-    end
+    if not field.abstract then
 
-    if field.type == "map" then
-      if field.keys.type ~= "string" then
-        return nil, entity_errors.MAP_KEY_STRINGS_ONLY:format(name)
-      end
+      if field.type == "map" then
+        if field.keys.type ~= "string" then
+          return nil, entity_errors.MAP_KEY_STRINGS_ONLY:format(name)
+        end
 
-    elseif field.type == "record" then
-      make_records_required(field)
+      elseif field.type == "record" then
+        make_records_required(field)
 
-    elseif field.type == "function" then
-      return nil, entity_errors.NO_FUNCTIONS:format(name)
-    end
+      elseif field.type == "function" then
+        return nil, entity_errors.NO_FUNCTIONS:format(name)
+      end
 
-    ::continue::
+    end
   end
 
   self.new_subschema = Entity.new_subschema
diff --git a/lua-tree/share/lua/5.1/kong/db/schema/init.lua b/lua-tree/share/lua/5.1/kong/db/schema/init.lua
index 454c601..f5761c7 100644
--- a/lua-tree/share/lua/5.1/kong/db/schema/init.lua
+++ b/lua-tree/share/lua/5.1/kong/db/schema/init.lua
@@ -2031,6 +2031,39 @@ local function allow_record_fields_by_name(record, loop)
 end
 
 
+local function get_transform_args(input, original_input, output, transformation)
+  local args = {}
+  local argc = 0
+  for _, input_field_name in ipairs(transformation.input) do
+    local value = get_field(output or original_input or input, input_field_name)
+    if is_nonempty(value) then
+      argc = argc + 1
+      if original_input then
+        args[argc] = get_field(output or input, input_field_name)
+      else
+        args[argc] = value
+      end
+
+    else
+      return nil
+    end
+  end
+
+  if transformation.needs then
+    for _, need in ipairs(transformation.needs) do
+      local value = get_field(output or input, need)
+      if is_nonempty(value) then
+        argc = argc + 1
+        args[argc] = get_field(output or input, need)
+
+      else
+        return nil
+      end
+    end
+  end
+  return args
+end
+
 --- Run transformations on fields.
 -- @param input The input table.
 -- @param original_input The original input for transformation detection.
@@ -2052,48 +2085,19 @@ function Schema:transform(input, original_input, context)
       transform = transformation.on_write
     end
 
-    if not transform then
-      goto next
-    end
+    if transform then
+      local args = get_transform_args(input, original_input, output, transformation)
 
-    local args = {}
-    local argc = 0
-    for _, input_field_name in ipairs(transformation.input) do
-      local value = get_field(output or original_input or input, input_field_name)
-      if is_nonempty(value) then
-        argc = argc + 1
-        if original_input then
-          args[argc] = get_field(output or input, input_field_name)
-        else
-          args[argc] = value
+      if args then
+        local data, err = transform(unpack(args))
+        if err then
+          return nil, validation_errors.TRANSFORMATION_ERROR:format(err)
         end
 
-      else
-        goto next
+        output = self:merge_values(data, output or input)
       end
     end
 
-    if transformation.needs then
-      for _, need in ipairs(transformation.needs) do
-        local value = get_field(output or input, need)
-        if is_nonempty(value) then
-          argc = argc + 1
-          args[argc] = get_field(output or input, need)
-
-        else
-          goto next
-        end
-      end
-    end
-
-    local data, err = transform(unpack(args))
-    if err then
-      return nil, validation_errors.TRANSFORMATION_ERROR:format(err)
-    end
-
-    output = self:merge_values(data, output or input)
-
-    ::next::
   end
 
   return output or input
-- 
2.25.1

